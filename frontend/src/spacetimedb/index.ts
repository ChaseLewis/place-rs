// THIS FILE IS AUTOMATICALLY GENERATED BY SPACETIMEDB. EDITS TO THIS FILE
// WILL NOT BE SAVED. MODIFY TABLES IN YOUR MODULE SOURCE CODE INSTEAD.

/* eslint-disable */
/* tslint:disable */
// @ts-nocheck
import {
  AlgebraicType,
  AlgebraicValue,
  BinaryReader,
  BinaryWriter,
  CallReducerFlags,
  ConnectionId,
  DbConnectionBuilder,
  DbConnectionImpl,
  DbContext,
  ErrorContextInterface,
  Event,
  EventContextInterface,
  Identity,
  ProductType,
  ProductTypeElement,
  ReducerEventContextInterface,
  SubscriptionBuilderImpl,
  SubscriptionEventContextInterface,
  SumType,
  SumTypeVariant,
  TableCache,
  TimeDuration,
  Timestamp,
  deepEqual,
} from "../test-sdk";

// Import and reexport all reducer arg types
import { CalculateServerStats } from "./calculate_server_stats_reducer.ts";
export { CalculateServerStats };
import { IdentityConnected } from "./identity_connected_reducer.ts";
export { IdentityConnected };
import { IdentityDisconnected } from "./identity_disconnected_reducer.ts";
export { IdentityDisconnected };
import { UpdatePixelCoord } from "./update_pixel_coord_reducer.ts";
export { UpdatePixelCoord };

// Import and reexport all table handle types
import { CalculateServerStatsTimerTableHandle } from "./calculate_server_stats_timer_table.ts";
export { CalculateServerStatsTimerTableHandle };
import { ConfigTableHandle } from "./config_table.ts";
export { ConfigTableHandle };
import { DisconnectedPlayersTableHandle } from "./disconnected_players_table.ts";
export { DisconnectedPlayersTableHandle };
import { PixelsTableHandle } from "./pixels_table.ts";
export { PixelsTableHandle };
import { PlayersTableHandle } from "./players_table.ts";
export { PlayersTableHandle };
import { ServerStatsTableHandle } from "./server_stats_table.ts";
export { ServerStatsTableHandle };

// Import and reexport all types
import { CalculateServerStatsTimer } from "./calculate_server_stats_timer_type.ts";
export { CalculateServerStatsTimer };
import { Config } from "./config_type.ts";
export { Config };
import { Pixel } from "./pixel_type.ts";
export { Pixel };
import { Player } from "./player_type.ts";
export { Player };
import { ServerStats } from "./server_stats_type.ts";
export { ServerStats };

const REMOTE_MODULE = {
  tables: {
    calculate_server_stats_timer: {
      tableName: "calculate_server_stats_timer",
      rowType: CalculateServerStatsTimer.getTypeScriptAlgebraicType(),
      primaryKey: "scheduledId",
      primaryKeyInfo: {
        colName: "scheduledId",
        colType: AlgebraicType.createU64Type()
      },
    },
    config: {
      tableName: "config",
      rowType: Config.getTypeScriptAlgebraicType(),
      primaryKey: "configId",
      primaryKeyInfo: {
        colName: "configId",
        colType: AlgebraicType.createU32Type()
      },
    },
    disconnected_players: {
      tableName: "disconnected_players",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: AlgebraicType.createIdentityType()
      },
    },
    pixels: {
      tableName: "pixels",
      rowType: Pixel.getTypeScriptAlgebraicType(),
      primaryKey: "pixelId",
      primaryKeyInfo: {
        colName: "pixelId",
        colType: AlgebraicType.createU32Type()
      }
    },
    players: {
      tableName: "players",
      rowType: Player.getTypeScriptAlgebraicType(),
      primaryKey: "identity",
      primaryKeyInfo: {
        colName: "identity",
        colType: AlgebraicType.createIdentityType()
      },
    },
    server_stats: {
      tableName: "server_stats",
      rowType: ServerStats.getTypeScriptAlgebraicType(),
      primaryKey: "statsId",
      primaryKeyInfo: {
        colName: "statsId",
        colType: AlgebraicType.createU32Type()
      },
    },
  },
  reducers: {
    calculate_server_stats: {
      reducerName: "calculate_server_stats",
      argsType: CalculateServerStats.getTypeScriptAlgebraicType(),
    },
    identity_connected: {
      reducerName: "identity_connected",
      argsType: IdentityConnected.getTypeScriptAlgebraicType(),
    },
    identity_disconnected: {
      reducerName: "identity_disconnected",
      argsType: IdentityDisconnected.getTypeScriptAlgebraicType(),
    },
    update_pixel_coord: {
      reducerName: "update_pixel_coord",
      argsType: UpdatePixelCoord.getTypeScriptAlgebraicType(),
    },
  },
  // Constructors which are used by the DbConnectionImpl to
  // extract type information from the generated RemoteModule.
  //
  // NOTE: This is not strictly necessary for `eventContextConstructor` because
  // all we do is build a TypeScript object which we could have done inside the
  // SDK, but if in the future we wanted to create a class this would be
  // necessary because classes have methods, so we'll keep it.
  eventContextConstructor: (imp: DbConnectionImpl, event: Event<Reducer>) => {
    return {
      ...(imp as DbConnection),
      event
    }
  },
  dbViewConstructor: (imp: DbConnectionImpl) => {
    return new RemoteTables(imp);
  },
  reducersConstructor: (imp: DbConnectionImpl, setReducerFlags: SetReducerFlags) => {
    return new RemoteReducers(imp, setReducerFlags);
  },
  setReducerFlagsConstructor: () => {
    return new SetReducerFlags();
  }
}

// A type representing all the possible variants of a reducer.
export type Reducer = never
| { name: "CalculateServerStats", args: CalculateServerStats }
| { name: "IdentityConnected", args: IdentityConnected }
| { name: "IdentityDisconnected", args: IdentityDisconnected }
| { name: "UpdatePixelCoord", args: UpdatePixelCoord }
;

export class RemoteReducers {
  constructor(private connection: DbConnectionImpl, private setCallReducerFlags: SetReducerFlags) {}

  calculateServerStats(timer: CalculateServerStatsTimer) {
    const __args = { timer };
    let __writer = new BinaryWriter(1024);
    CalculateServerStats.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("calculate_server_stats", __argsBuffer, this.setCallReducerFlags.calculateServerStatsFlags);
  }

  onCalculateServerStats(callback: (ctx: ReducerEventContext, timer: CalculateServerStatsTimer) => void) {
    this.connection.onReducer("calculate_server_stats", callback);
  }

  removeOnCalculateServerStats(callback: (ctx: ReducerEventContext, timer: CalculateServerStatsTimer) => void) {
    this.connection.offReducer("calculate_server_stats", callback);
  }

  onIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_connected", callback);
  }

  removeOnIdentityConnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_connected", callback);
  }

  onIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.onReducer("identity_disconnected", callback);
  }

  removeOnIdentityDisconnected(callback: (ctx: ReducerEventContext) => void) {
    this.connection.offReducer("identity_disconnected", callback);
  }

  updatePixelCoord(pixelId: number, fillColor: number) {
    const __args = { pixelId, fillColor };
    let __writer = new BinaryWriter(1024);
    UpdatePixelCoord.getTypeScriptAlgebraicType().serialize(__writer, __args);
    let __argsBuffer = __writer.getBuffer();
    this.connection.callReducer("update_pixel_coord", __argsBuffer, this.setCallReducerFlags.updatePixelCoordFlags);
  }

  onUpdatePixelCoord(callback: (ctx: ReducerEventContext, pixelId: number, fillColor: number) => void) {
    this.connection.onReducer("update_pixel_coord", callback);
  }

  removeOnUpdatePixelCoord(callback: (ctx: ReducerEventContext, pixelId: number, fillColor: number) => void) {
    this.connection.offReducer("update_pixel_coord", callback);
  }

}

export class SetReducerFlags {
  calculateServerStatsFlags: CallReducerFlags = 'FullUpdate';
  calculateServerStats(flags: CallReducerFlags) {
    this.calculateServerStatsFlags = flags;
  }

  updatePixelCoordFlags: CallReducerFlags = 'FullUpdate';
  updatePixelCoord(flags: CallReducerFlags) {
    this.updatePixelCoordFlags = flags;
  }

}

export class RemoteTables {
  constructor(private connection: DbConnectionImpl) {}

  get calculateServerStatsTimer(): CalculateServerStatsTimerTableHandle {
    return new CalculateServerStatsTimerTableHandle(this.connection.clientCache.getOrCreateTable<CalculateServerStatsTimer>(REMOTE_MODULE.tables.calculate_server_stats_timer));
  }

  get config(): ConfigTableHandle {
    return new ConfigTableHandle(this.connection.clientCache.getOrCreateTable<Config>(REMOTE_MODULE.tables.config));
  }

  get disconnectedPlayers(): DisconnectedPlayersTableHandle {
    return new DisconnectedPlayersTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.disconnected_players));
  }

  get pixels(): PixelsTableHandle {
    return new PixelsTableHandle(this.connection.clientCache.getOrCreateTable<Pixel>(REMOTE_MODULE.tables.pixels));
  }

  get players(): PlayersTableHandle {
    return new PlayersTableHandle(this.connection.clientCache.getOrCreateTable<Player>(REMOTE_MODULE.tables.players));
  }

  get serverStats(): ServerStatsTableHandle {
    return new ServerStatsTableHandle(this.connection.clientCache.getOrCreateTable<ServerStats>(REMOTE_MODULE.tables.server_stats));
  }
}

export class SubscriptionBuilder extends SubscriptionBuilderImpl<RemoteTables, RemoteReducers, SetReducerFlags> { }

export class DbConnection extends DbConnectionImpl<RemoteTables, RemoteReducers, SetReducerFlags> {
  static builder = (): DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext> => {
    return new DbConnectionBuilder<DbConnection, ErrorContext, SubscriptionEventContext>(REMOTE_MODULE, (imp: DbConnectionImpl) => imp as DbConnection);
  }
  subscriptionBuilder = (): SubscriptionBuilder => {
    return new SubscriptionBuilder(this);
  }
}

export type EventContext = EventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type ReducerEventContext = ReducerEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags, Reducer>;
export type SubscriptionEventContext = SubscriptionEventContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
export type ErrorContext = ErrorContextInterface<RemoteTables, RemoteReducers, SetReducerFlags>;
